function limo_add_plots(varargin)

% interactive ploting functon for data generated by
% limo_central_tendency_and_ci, limo_plot_difference or any data in 
% 4D with dim channels * frames * conditions * 3 with this last dim being
% the low end of the confidence interval, the estimator (like eg mean), 
% high end of the confidence interval 
% The variable mame in is called M, TM, Med, HD or diff
% ------------------------------
%  Copyright (C) LIMO Team 2019

out       = 0;
turn      = 1;
channel = [];

if ~isempty(varargin)
    [path,infile] = fileparts(varargin{1});
    infile        = [infile '.mat'];
    if isempty(path)
        path = [pwd filesep]; 
    end
else
    infile = [];
end

while out == 0
    subjects_plot = 0;

    %% Data selection
    % 
    if ~isempty(infile)
        file = infile; infile = []; index = 1; out = 1;
    else
        [file,path,index]=uigetfile('*mat',['Select Central tendency file n:' num2str(turn) '']);
    end
    
    if index == 0
        out = 1;
        return
    else
        data = load(fullfile(path,file));
        data = getfield(data,cell2mat(fieldnames(data)));
        % the last dim of data.xxx if 3 (low CI, estimator, high CI)
        if isfield(data,'mean') 
            name{turn} = 'Mean';
            tmp = data.mean;
        elseif isfield(data,'trimmed_mean')
            name{turn} = 'Trimmed Mean';
            tmp = data.trimmed_mean;
        elseif isfield(data,'median')
            name{turn} = 'Median';
            tmp = data.median;
        elseif isfield(data,'Harrell_Davis')
            name{turn} = 'Harrell-Davis';
            tmp = data.Harrell_Davis;
        elseif isfield(data,'diff')
            name{turn} = 'Difference';
            tmp = NaN(size(data.diff,1),size(data.diff,2),1,size(data.diff,3));
            tmp(:,:,1,:) = data.diff;
        % the last dim of data.data is the number of subjects or the trials 
        % sorted by there weights (dim=10) ; figure case using file name
        elseif isfield(data,'data')
            if ~isempty(strfind(file, 'Mean'))
                name{turn} = 'Subjects'' Means';
            elseif ~isempty(strfind(file, 'Trimmed mean'))
                name{turn} = 'Subjects'' Trimmed Means';
            elseif ~isempty(strfind(file, 'HD'))
                name{turn} = 'Subjects'' Mid Deciles HD';
            elseif ~isempty(strfind(file, 'Median'))
                name{turn} = 'Subjects'' Medians';
            else
                if strcmpi(file,'subjects_weighted_data.mat')
                    name{turn} = 'Data plotted per weight';
                else
                    underscores = strfind(file, '_');
                    if ~isempty(underscores)
                        file(underscores) = ' ';
                    end
                    ext = strfind(file, '.');
                    file(max(ext):end) = [];
                    name{turn} = file;
                end
            end
            subjects_plot = 1;
            tmp = data.data;
        else
            errordlg2('unknown file format');
            return
        end
    end
    
    if isfield(data,'limo')
        limo = data.limo;
    else
        [limofile,locpath]=uigetfile({'LIMO.mat'},'Select any LIMO with right info');
        if strcmp(limofile,'LIMO.mat')
            LIMO = load(fullfile(locpath,limofile));
            limo = LIMO.LIMO; clear LIMO;
            data.limo = limo;
            save(fullfile(path,file),'data')
        else
            warning('selection aborded'); return
        end
    end
    
    % store each iteration into Data
    clear data
    if size(tmp,1) == 1 && size(tmp,3) == 1 % only 1 channel and 1 variable
        D = squeeze(tmp(:,:,1,:));
        Data = nan(1,size(tmp,2),size(tmp,4));
        Data(1,:,:) = D; clear D;
    elseif size(tmp,1) > 1 && size(tmp,3) == 1 % only 1 variable
        Data = squeeze(tmp(:,:,1,:));
    else 
        if nargin >= 2
            v = varargin{2};
        else
            if subjects_plot == 0
                v = cell2mat(inputdlg(['which variable to plot, 1 to ' num2str(size(tmp,3))],'plotting option'));
            else
                if ~exist('v','var')
                    v = cell2mat(inputdlg(['which variable to plot, 1 to ' num2str(size(tmp,3))],'plotting option'));
                end
            end
        end
        
        if isempty(v) 
            out = 1; return
        elseif strcmp(v,'mean')
            Data = squeeze(nanmean(tmp,3));
        else        
            if ischar(v)
                v = eval(v);
            end
            
            if  subjects_plot == 0 && length(v)>1
                errordlg2('only 1 parameter value expected')
            else
                if size(tmp,1) == 1 && size(tmp,3) > 1
                    D = squeeze(tmp(:,:,v,:));
                    Data = nan(1,size(tmp,2),size(tmp,4));
                    Data(1,:,:) = D; clear D;
                else
                    Data = squeeze(tmp(:,:,v,:));
                end
            end
        end
    end
    clear tmp
    
    
    %% prep figure the 1st time rounnd
    % ------------------------------
    if turn == 1
        figure('Name','Central Tendency Estimate','color','w'); hold on
        
        % frame info
        % ----------
        if strcmpi(limo.Analysis,'Time')
            vect = limo.data.start:(1000/limo.data.sampling_rate):limo.data.end;  % in msec
        elseif strcmpi(limo.Analysis,'Frequency')
            vect = linspace(limo.data.start,limo.data.end,size(Data,2));
        else
            v = inputdlg('enter x axis interval e.g. [0:0.5:200]');
            if isempty(v)
                return
            else
                try
                    vect = eval(cell2mat(v));
                    if length(vect) ~= size(Data,2)
                        disp('interval invalid format');
                        vect = 1:size(Data,2);
                    end
                catch ME
                    disp('interval invalid format');
                    vect = 1:size(Data,2);
                end
            end
        end
    end
    
    %% channel to plot
    % ----------------
    if size(Data,1) == 1
        Data = squeeze(Data(1,:,:)); 
    else
        if nargin == 3
            channel = varargin{3};
        else
            if isempty(channel)
                channel = inputdlg(['which channel to plot 1 to' num2str(size(Data,1))],'channel choice');
            end
        end
        
        if strcmp(channel,'') || isempty(channel)
            tmp = Data(:,:,2); 
            if sum(isnan(tmp(:))) == numel(tmp)
                error('the data file appears empty (only NaNs)')
            else
                if abs(max(tmp(:))) > abs(min(tmp(:)))
                    [channel,~,~] = ind2sub(size(tmp),find(tmp==max(tmp(:))));
                else
                    [channel,~,~] = ind2sub(size(tmp),find(tmp==min(tmp(:))));
                end
                if length(channel) ~= 1; channel = channel(1); end
                Data = squeeze(Data(channel,:,:)); fprintf('ploting channel %g\n',channel)
            end
        else
            try
                Data = squeeze(Data(channel,:,:));
            catch
                Data = squeeze(Data(eval(cell2mat(channel)),:,:));
            end
        end
    end
    
    % finally plot
    % ---------------
    if turn==1
        if subjects_plot == 1
            plot(vect,Data,'LineWidth',2); 
            assignin('base','plotted_data',Data)
        else
            plot(vect,Data(:,2)','LineWidth',3);
            assignin('base','plotted_data',Data(:,2)')
        end
        colorOrder = get(gca, 'ColorOrder');
        colorindex = 1;
    else
        if subjects_plot == 0
            plot(vect,Data(:,2)','Color',colorOrder(colorindex,:),'LineWidth',3);
        else
            plot(vect,Data,'LineWidth',2);
        end
        assignin('base','plotted_data',Data(:,2)')
    end
    
    if subjects_plot == 0
        fillhandle = patch([vect fliplr(vect)], [Data(:,1)',fliplr(Data(:,3)')], colorOrder(colorindex,:));
        set(fillhandle,'EdgeColor',colorOrder(colorindex,:),'FaceAlpha',0.2,'EdgeAlpha',0.8);%set edge color
    end
    grid on; axis tight; box on;
    xlabel('Time ','FontSize',14)
    ylabel('Amplitude','FontSize',14)
        
    if turn == 1
        mytitle = name{1};
    else
        mytitle = sprintf('%s & %s',mytitle,name{turn});
    end
    
    if iscell(channel)
        channel = eval(cell2mat(channel));
    end
    title(sprintf('channel %g \n %s',channel,mytitle),'Fontsize',16);
    
    % updates
    turn = turn+1;
    if colorindex <7
        colorindex = colorindex + 1;
    else
        colorindex = 1;
    end
    
    pause(1);
end
    
